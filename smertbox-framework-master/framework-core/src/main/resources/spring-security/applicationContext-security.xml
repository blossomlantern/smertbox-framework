<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">

	<global-method-security proxy-target-class="true"
		access-decision-manager-ref="accessDecisionManager"
		secured-annotations="enabled" />

	<sec:http pattern="/" security="none" />
	<sec:http pattern="/sign/**" security="none" />
	<sec:http pattern="/favicon.ico" security="none" />
	<sec:http pattern="/js/**" security="none" />
	<sec:http pattern="/css/**" security="none" />
	<sec:http pattern="/img/**" security="none" />
	<sec:http pattern="/fonts/**" security="none" />
	<sec:http pattern="/font-awesome/**" security="none" />
	<sec:http pattern="/error/**" security="none" />
	<sec:http pattern="/kaptcha/**" security="none" />
	<sec:http pattern="/skin-config" security="none" />
	<!-- <sec:http pattern="https://seal.wosign.com/tws.js" security="none" /> -->
	<sec:http pattern="/.well-known/**" security="none" />
	<!-- <sec:http pattern="/api/attachment/**" security="none" /> -->
<!-- 	<sec:http pattern="/druid/**" security="none" /> -->

	<sec:http access-decision-manager-ref="accessDecisionManager"
		entry-point-ref="authenticationEntryPoint">

		<sec:anonymous enabled="true" key="doesNotMatter"
			username="anonymousUser" granted-authority="ROLE_ANONYMOUS" />

		<!-- disabled="true" 禁用 -->
		<csrf request-matcher-ref="csrfMatcher"/>
		<headers>
			<cache-control />
			<content-type-options />
			<hsts />
			<frame-options policy="SAMEORIGIN"/>
			<xss-protection />
		</headers>

		<!-- 退出登录 -->
		<sec:logout logout-url="/j_spring_security_logout" logout-success-url="/sign/in?error=logout" delete-cookies="JSESSIONID" />

		<!-- 增加一个filter(ExceptionTranslationFilter) -->
		<sec:custom-filter after="EXCEPTION_TRANSLATION_FILTER"
			ref="exceptionTranslationFilter" />

		<!-- 增加一个filter(ConcurrentSessionFilter) -->
		<sec:custom-filter position="CONCURRENT_SESSION_FILTER"
			ref="concurrentSessionFilter" />

		<!-- 增加一个filter(UsernamePasswordAuthenticationFilter) -->
		<sec:custom-filter position="FORM_LOGIN_FILTER"
			ref="customAuthenticationFilter" />

		<!-- 增加一个filter(FilterSecurityInterceptor) -->
		<sec:custom-filter before="FILTER_SECURITY_INTERCEPTOR"
			ref="filterSecurityInterceptor" />

		<!-- session-management复杂配置 -->
		<sec:session-management
			session-authentication-strategy-ref="sas" />

	</sec:http>

	<!-- 自定义权限管理 使用sha-256进行密码加密 -->
	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider
			user-service-ref="userDetailService">
			<sec:password-encoder hash="sha-256" base64="true">
				<sec:salt-source ref="saltSource" />
			</sec:password-encoder>
		</sec:authentication-provider>
	</sec:authentication-manager>

	<!-- 自定义资源、权限过滤器 -->
	<beans:bean id="filterSecurityInterceptor"
		class="com.smertbox.security.core.filter.CustomFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="accessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!-- 自定义登录filter -->
	<beans:bean id="customAuthenticationFilter"
		class="com.smertbox.security.core.filter.CustomAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="usernameParameter" value="username" />
		<beans:property name="passwordParameter" value="password" />
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check" />
		<beans:property name="authenticationFailureHandler"
			ref="failureHandler" />
		<beans:property name="authenticationSuccessHandler"
			ref="successHandler" />
		<beans:property name="kaptchaHandler" ref="kaptchaHandler" />
		<beans:property name="sessionAuthenticationStrategy"
			ref="sas" />
	</beans:bean>

	<beans:bean id="exceptionTranslationFilter"
		class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<beans:constructor-arg ref="authenticationEntryPoint" />
		<beans:property name="accessDeniedHandler" ref="accessDeniedHandler" />
	</beans:bean>

	<!-- 禁止访问 -->
	<beans:bean id="accessDeniedHandler"
		class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<beans:property name="errorPage" value="/error/403" />
	</beans:bean>

	<!-- 引导登录 -->
	<beans:bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:constructor-arg value="/sign/in" />
	</beans:bean>

	<!-- 授权成功 -->
	<beans:bean id="successHandler"
		class="com.smertbox.security.core.handler.AuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/security/manage" />
	</beans:bean>

	<!-- 授权失败 -->
	<beans:bean id="failureHandler"
		class="com.smertbox.security.core.handler.AuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/sign/in?error=illegal" />
	</beans:bean>

	<!-- 验证码验证失败 -->
	<beans:bean id="kaptchaHandler"
		class="com.smertbox.security.core.handler.KaptchaHandler">
		<beans:property name="defaultFailureUrl" value="/sign/in?error=kaptchaIncorrect" />
	</beans:bean>
	
	<!-- 退出成功 -->
	<!-- <beans:bean id="logoutSuccessHandler" class="com.smertbox.security.core.handler.LogoutSuccessHandler"/> -->

	<!-- 自定义user-service -->
	<beans:bean id="userDetailService"
		class="com.smertbox.security.core.service.CustomUserDetailsService" />

	<!-- 权限访问决策管理器 -->
	<beans:bean id="accessDecisionManager"
		class="com.smertbox.security.core.CustomAccessDecisionManager" />

	<!-- 资源/资源对应访问 -->
	<beans:bean id="securityMetadataSource"
		class="com.smertbox.security.core.filter.CustomFilterInvocationSecurityMetadataSource" />

	<!-- 自定义saltSource -->
	<beans:bean id="saltSource"
		class="com.smertbox.security.core.salt.CustomSaltSource" />

	<!-- session认证保留 -->
	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

	<!-- session认证决策策略 -->
	<beans:bean id="sas"
		class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
					<beans:constructor-arg ref="sessionRegistry" />
					<beans:property name="maximumSessions" value="3" />
					<beans:property name="exceptionIfMaximumExceeded"
						value="true" />
				</beans:bean>
				<beans:bean
					class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"></beans:bean>
				<beans:bean
					class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
					<beans:constructor-arg ref="sessionRegistry" />
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<!-- 同一用户并发登录filter -->
	<beans:bean id="concurrentSessionFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:constructor-arg ref="sessionRegistry" />
		<beans:constructor-arg value="/sign/in?error=sessionTimeOut" />
		<!-- <beans:property name="expiredUrl" value="/sign/inpage?error=sessionTimeOut" 
			/> -->
	</beans:bean>

	<!-- CSRF自动填充token  -->
  	<beans:bean id="csrfFilter" class="org.springframework.security.web.csrf.CsrfFilter">
	    <beans:constructor-arg>
	      <beans:bean class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />
	    </beans:constructor-arg>
	    <beans:property name="requireCsrfProtectionMatcher" ref="csrfMatcher" />
 	</beans:bean>

	<!-- post方法不需要进行token校验例外添加 -->
	<beans:bean id="csrfMatcher" class="com.smertbox.security.core.matcher.csrf.CsrfSecurityIgnoringRequestMatcher">
        <beans:property name="ignroingUrls">
           <beans:list>
               <beans:value>/druid/**</beans:value>
           </beans:list>
        </beans:property>
    </beans:bean>

	<!-- 提供自动注入 CSRF token 前提是使用了Spring MVC表单标签或者Thymeleaf. -->
	<beans:bean id="requestDataValueProcessor"
		class="org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor" />

</beans:beans>